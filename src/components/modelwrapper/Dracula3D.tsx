/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { observable } from "mobx";
// N, E, S, W
export const DIRECTION_PARAMS = observable([
  { rotation: Math.PI, dx: 0.5, dy: 0, dz: 0.8 },
  { rotation: Math.PI / 2, dx: 0.3, dy: 0, dz: 0.8 },
  { rotation: 0, dx: 0.3, dy: 0, dz: 0.4 },
  { rotation: -Math.PI / 2, dx: 0.9, dy: 0, dz: 0.6 },
]);

type GLTFResult = GLTF & {
  nodes: {
    node_id30: THREE.Mesh;
  };
  materials: {
    ["107"]: THREE.MeshStandardMaterial;
  };
};

export default function Model({ ...props }: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF("/Dracula3D.glb") as GLTFResult;
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.node_id30.geometry} material={materials["107"]} position={[0, 0, 0]} scale={0.4} />
    </group>
  );
}

useGLTF.preload("/Dracula3D.glb");
