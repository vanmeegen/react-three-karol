/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    node_id30: THREE.Mesh;
  };
  materials: {
    ["78"]: THREE.MeshStandardMaterial;
  };
};
// N, E, S, W
export const DIRECTION_PARAMS = [
  { rotation: Math.PI, dx: 0.2, dy: 0, dz: 0.8 },
  { rotation: Math.PI / 2, dx: 0.1, dy: 0, dz: 0.3 },
  { rotation: 0, dx: 0.7, dy: 0, dz: 0.2 },
  { rotation: -Math.PI / 2, dx: 0.8, dy: 0, dz: 0.8 },
];

export default function Model({ ...props }: React.JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials } = useGLTF("Weltraumwesen3D.glb") as any;
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.node_id30.geometry} material={materials["78"]} position={[-0.25, 0, 0.25]} scale={0.14} />
    </group>
  );
}

useGLTF.preload("Weltraumwesen3D.glb");
